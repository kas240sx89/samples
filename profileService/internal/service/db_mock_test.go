// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	models2 "github.com/kas240sx89/samples/profileService/internal/models"
	"sync"
)

var (
	lockDBMockCreateProfile sync.RWMutex
	lockDBMockDeleteProfile sync.RWMutex
	lockDBMockGetProfile    sync.RWMutex
	lockDBMockGetProfileID  sync.RWMutex
	lockDBMockUpdateProfile sync.RWMutex
)

// Ensure, that DBMock does implement DB.
// If this is not the case, regenerate this file with moq.
var _ DB = &DBMock{}

// DBMock is a mock implementation of DB.
//
//     func TestSomethingThatUsesDB(t *testing.T) {
//
//         // make and configure a mocked DB
//         mockedDB := &DBMock{
//             CreateProfileFunc: func(profile *models.Profile) (*models.Profile, error) {
// 	               panic("mock out the CreateProfile method")
//             },
//             DeleteProfileFunc: func(id string) error {
// 	               panic("mock out the DeleteProfile method")
//             },
//             GetProfileFunc: func(id string) (*models.Profile, error) {
// 	               panic("mock out the GetProfile method")
//             },
//             GetProfileIDFunc: func(email string) (string, error) {
// 	               panic("mock out the GetProfileID method")
//             },
//             UpdateProfileFunc: func(profile *models.Profile) (*models.Profile, error) {
// 	               panic("mock out the UpdateProfile method")
//             },
//         }
//
//         // use mockedDB in code that requires DB
//         // and then make assertions.
//
//     }
type DBMock struct {
	// CreateProfileFunc mocks the CreateProfile method.
	CreateProfileFunc func(profile *models2.Profile) (*models2.Profile, error)

	// DeleteProfileFunc mocks the DeleteProfile method.
	DeleteProfileFunc func(id string) error

	// GetProfileFunc mocks the GetProfile method.
	GetProfileFunc func(id string) (*models2.Profile, error)

	// GetProfileIDFunc mocks the GetProfileID method.
	GetProfileIDFunc func(email string) (string, error)

	// UpdateProfileFunc mocks the UpdateProfile method.
	UpdateProfileFunc func(profile *models2.Profile) (*models2.Profile, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateProfile holds details about calls to the CreateProfile method.
		CreateProfile []struct {
			// Profile is the profile argument value.
			Profile *models2.Profile
		}
		// DeleteProfile holds details about calls to the DeleteProfile method.
		DeleteProfile []struct {
			// ID is the id argument value.
			ID string
		}
		// GetProfile holds details about calls to the GetProfile method.
		GetProfile []struct {
			// ID is the id argument value.
			ID string
		}
		// GetProfileID holds details about calls to the GetProfileID method.
		GetProfileID []struct {
			// Email is the email argument value.
			Email string
		}
		// UpdateProfile holds details about calls to the UpdateProfile method.
		UpdateProfile []struct {
			// Profile is the profile argument value.
			Profile *models2.Profile
		}
	}
}

// CreateProfile calls CreateProfileFunc.
func (mock *DBMock) CreateProfile(profile *models2.Profile) (*models2.Profile, error) {
	if mock.CreateProfileFunc == nil {
		panic("DBMock.CreateProfileFunc: method is nil but DB.CreateProfile was just called")
	}
	callInfo := struct {
		Profile *models2.Profile
	}{
		Profile: profile,
	}
	lockDBMockCreateProfile.Lock()
	mock.calls.CreateProfile = append(mock.calls.CreateProfile, callInfo)
	lockDBMockCreateProfile.Unlock()
	return mock.CreateProfileFunc(profile)
}

// CreateProfileCalls gets all the calls that were made to CreateProfile.
// Check the length with:
//     len(mockedDB.CreateProfileCalls())
func (mock *DBMock) CreateProfileCalls() []struct {
	Profile *models2.Profile
} {
	var calls []struct {
		Profile *models2.Profile
	}
	lockDBMockCreateProfile.RLock()
	calls = mock.calls.CreateProfile
	lockDBMockCreateProfile.RUnlock()
	return calls
}

// DeleteProfile calls DeleteProfileFunc.
func (mock *DBMock) DeleteProfile(id string) error {
	if mock.DeleteProfileFunc == nil {
		panic("DBMock.DeleteProfileFunc: method is nil but DB.DeleteProfile was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockDBMockDeleteProfile.Lock()
	mock.calls.DeleteProfile = append(mock.calls.DeleteProfile, callInfo)
	lockDBMockDeleteProfile.Unlock()
	return mock.DeleteProfileFunc(id)
}

// DeleteProfileCalls gets all the calls that were made to DeleteProfile.
// Check the length with:
//     len(mockedDB.DeleteProfileCalls())
func (mock *DBMock) DeleteProfileCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockDBMockDeleteProfile.RLock()
	calls = mock.calls.DeleteProfile
	lockDBMockDeleteProfile.RUnlock()
	return calls
}

// GetProfile calls GetProfileFunc.
func (mock *DBMock) GetProfile(id string) (*models2.Profile, error) {
	if mock.GetProfileFunc == nil {
		panic("DBMock.GetProfileFunc: method is nil but DB.GetProfile was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockDBMockGetProfile.Lock()
	mock.calls.GetProfile = append(mock.calls.GetProfile, callInfo)
	lockDBMockGetProfile.Unlock()
	return mock.GetProfileFunc(id)
}

// GetProfileCalls gets all the calls that were made to GetProfile.
// Check the length with:
//     len(mockedDB.GetProfileCalls())
func (mock *DBMock) GetProfileCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockDBMockGetProfile.RLock()
	calls = mock.calls.GetProfile
	lockDBMockGetProfile.RUnlock()
	return calls
}

// GetProfileID calls GetProfileIDFunc.
func (mock *DBMock) GetProfileID(email string) (string, error) {
	if mock.GetProfileIDFunc == nil {
		panic("DBMock.GetProfileIDFunc: method is nil but DB.GetProfileID was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockDBMockGetProfileID.Lock()
	mock.calls.GetProfileID = append(mock.calls.GetProfileID, callInfo)
	lockDBMockGetProfileID.Unlock()
	return mock.GetProfileIDFunc(email)
}

// GetProfileIDCalls gets all the calls that were made to GetProfileID.
// Check the length with:
//     len(mockedDB.GetProfileIDCalls())
func (mock *DBMock) GetProfileIDCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockDBMockGetProfileID.RLock()
	calls = mock.calls.GetProfileID
	lockDBMockGetProfileID.RUnlock()
	return calls
}

// UpdateProfile calls UpdateProfileFunc.
func (mock *DBMock) UpdateProfile(profile *models2.Profile) (*models2.Profile, error) {
	if mock.UpdateProfileFunc == nil {
		panic("DBMock.UpdateProfileFunc: method is nil but DB.UpdateProfile was just called")
	}
	callInfo := struct {
		Profile *models2.Profile
	}{
		Profile: profile,
	}
	lockDBMockUpdateProfile.Lock()
	mock.calls.UpdateProfile = append(mock.calls.UpdateProfile, callInfo)
	lockDBMockUpdateProfile.Unlock()
	return mock.UpdateProfileFunc(profile)
}

// UpdateProfileCalls gets all the calls that were made to UpdateProfile.
// Check the length with:
//     len(mockedDB.UpdateProfileCalls())
func (mock *DBMock) UpdateProfileCalls() []struct {
	Profile *models2.Profile
} {
	var calls []struct {
		Profile *models2.Profile
	}
	lockDBMockUpdateProfile.RLock()
	calls = mock.calls.UpdateProfile
	lockDBMockUpdateProfile.RUnlock()
	return calls
}
